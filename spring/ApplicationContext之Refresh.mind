{"root":{"data":{"id":"cx7jm1pf9800","created":1700879923139,"text":"refresh","note":"AbstaractApplicationContext中的方法\n无论使用何种方式ApplicaitonContext都会调用的到这个方法里面来。\n区别在于加载配置文件的方式有所不同而已。\n\n**注意右边的方法顺序与颜色**：\n- 紫色为非try正常执行\n- 蓝色为try内执行\n- 红色为catch执行\n- 橙色为 finally内执行"},"children":[{"data":{"id":"cx7jmht0d4o0","created":1700879958185,"text":"1. prefareRefresh","layout":null,"background":"#e5dfec","expandState":"collapse","note":"设置一些标志位\n调用模版方法initPropertySource\n校验必要的环境属性\n事件监听器的从定向复制\nnew LinkedHashSet<>()并赋值给eralyApplicationEvents\n"},"children":[{"data":{"id":"cx7ksjfkblk0","created":1700883253020,"text":"设置一些标志属性","expandState":"expand","layout":null},"children":[{"data":{"id":"cx7kt6yl2ow0","created":1700883304236,"text":"context的启动时间","layout":null},"children":[]},{"data":{"id":"cx7ktchfh5k0","created":1700883316260,"text":"context的关闭标志","layout":null},"children":[]},{"data":{"id":"cx7ktkgnomg0","created":1700883333627,"text":"context的激活标志","layout":null},"children":[]}]},{"data":{"id":"cx7ksrudsa00","created":1700883271330,"text":"调用模版方法initPropertySource","progress":1,"layout":null},"children":[]},{"data":{"id":"cx7ktz9nxuw0","created":1700883365856,"text":"校验环境对象中是否包含必要的属性","note":"getEnvironment().validateRequiredProperties();\n\ngetEnvironment()：获取环境对象，不存在就新建StandardEnvironment。\n一般在ClassPathXmlApplicaton的构造方法中进行配置文件的路径解析时（setConfigLocations方法中）也会调用此方法","layout":null},"children":[]},{"data":{"id":"cx7phg7sb400","created":1700896489563,"text":"监听器的引用重定向","layout":null},"children":[]},{"data":{"id":"cx7pjacgyxs0","created":1700896633514,"text":"创建刷新前的监听事件集合","layout":null},"children":[]}]},{"data":{"id":"cx7jr8xsuk80","created":1700880330704,"text":"2. obtainFreshBeanFactory","background":"#e5dfec","expandState":"collapse","layout":null,"note":"createBeanFactory -> new DefaultListableBeanFactory() -> 设置了三个忽略依赖的Aware接口\nloadBeanDefinitions"},"children":[{"data":{"id":"cx7kxny2xbk0","created":1700883654668,"text":"refreshBeanFactory","note":"不同实现类逻辑不同，这里考虑AbstractRefreshableApplicationContext\n\n初始化beanFactory并进行配置文件的读取与加载BeanDefinition返回DefaultListableBeanFactorya对象，当前Context持有这个对象","expandState":"collapse","layout":null},"children":[{"data":{"id":"cx7l36xtwq80","created":1700884087832,"text":"1. 如果存在Beanfactory对象，销毁并关闭","note":"```java\n\nif (hasBeanFactory()) {\n\tdestroyBeans();\n\tcloseBeanFactory();\n}\n```","expandState":"expand","layout":null},"children":[{"data":{"id":"cx7l64w7ssg0","created":1700884318474,"text":"hasBeanFactory","layout":null},"children":[{"data":{"id":"cx7l6zkkz940","created":1700884385250,"text":"当前context对象持有的beanFactory引用不为空","layout":null},"children":[]}]},{"data":{"id":"cx7l6b1k9w80","created":1700884331858,"text":"destroyBeans","layout":null},"children":[{"data":{"id":"cx7l8vc1kt40","created":1700884532755,"text":"模版方法，调用到BeanFactory的销毁方法","layout":null},"children":[]}]},{"data":{"id":"cx7l6br0bj40","created":1700884333396,"text":"closeBeanFactory","layout":null},"children":[{"data":{"id":"cx7l98x72xk0","created":1700884562333,"text":"beanFactory的id设置为null， 删除对beanFactory的引用","layout":null},"children":[]}]}]},{"data":{"id":"cx7l9pjkzjc0","created":1700884598515,"text":"2. createBeanFactory","note":"通常是创建DefaultListableBeanFactory\n\n会设置忽略依赖的接口 BeanNameAware,BeanFactoryAware,BeanClassLoaderAware","expandState":"collapse","layout":null},"children":[{"data":{"id":"cx7lbbxvt6o0","created":1700884725633,"text":"new DefaultListableBeanFacotry(getInternalParentBeanFactory())","note":"getInternalParentBeanFactory在元素spring的情况下默认为null，这里有个父子容器的概念","expandState":"expand","layout":null},"children":[{"data":{"id":"cx7lczkead40","created":1700884855424,"text":"调用父类AbstractAutowiredConpableBeanFactory构造方法","note":"忽略要依赖的三个内置的Aware接口","layout":null},"children":[{"data":{"id":"cx7ldzwofhk0","created":1700884934531,"text":"ingoreDependencyInterface(BeanNameAware.class)","layout":null},"children":[]},{"data":{"id":"cx7levic9og0","created":1700885003321,"text":"ingoreDependencyInterface(BeanFactoryAware.class)","layout":null},"children":[]},{"data":{"id":"cx7lew5tiog0","created":1700885004741,"text":"ingoreDependencyInterface(BeanClassLoader.class)","layout":null},"children":[]},{"data":{"id":"cx7lgubpots0","created":1700885157472,"text":"设置ParentBeanFactory","note":"默认为null","layout":null},"children":[]}]}]}]},{"data":{"id":"cx7laku0qi80","created":1700884666626,"text":"3. 设置beanFacotry的序列化id","layout":null},"children":[]},{"data":{"id":"cx7licatjo80","created":1700885274964,"text":"4. cuntomizeBeanFacotry","layout":null,"expandState":"collapse"},"children":[{"data":{"id":"cx7lj5nrihs0","created":1700885338873,"text":"设置是否允许beanDefinition的覆盖","layout":null},"children":[]},{"data":{"id":"cx7lj691heg0","created":1700885340160,"text":"设置是否允许循环依赖","layout":null},"children":[]}]},{"data":{"id":"cx7lkguvga80","created":1700885441612,"text":"5. loadBeanDefinitions","note":"- 读取与解析配置文件加载beanDefinition到BeanRegistry中.\n- 整体流程遵循配置文件地址String -> Resource资源对象 -> document对象 -> 获取命名空间url -> 获取对应的handler对象 ->parse ->  调用的具体的parse对象进行解析处理与BeanDefinition生成与注册\n- 调用子类xxApplicationContext的方法。以`AbstractXmlApplicationContext`为例","expandState":"expand","layout":null},"children":[{"data":{"id":"cx7lsiqyifs0","created":1700886072642,"text":"1. 创建BeanDefinitionReader","layout":null},"children":[]},{"data":{"id":"cx7lsyt63480","created":1700886107604,"text":"2. 给BeanDefinitionReader设置一些属性","expandState":"collapse","layout":null},"children":[{"data":{"id":"cx7lus2z6yw0","created":1700886249688,"text":"setEnvironment","layout":null},"children":[]},{"data":{"id":"cx7luwyrn8w0","created":1700886260318,"text":"setResourceLoader","layout":null},"children":[]},{"data":{"id":"cx7lvcd1o800","created":1700886293833,"text":"setEntityResolver","layout":null},"children":[]}]},{"data":{"id":"cx7ltddwyd40","created":1700886139334,"text":"3. 初始化BeanDefinitionReader","expandState":"collapse","layout":null},"children":[{"data":{"id":"cx7lulyx9aw0","created":1700886236383,"text":"设置配置文件是否需要验证","layout":null},"children":[]}]},{"data":{"id":"cx7lu0ju19s0","created":1700886189758,"text":"4. loadBeanDefinitions(beanDefinitionReader)","layout":null,"expandState":"collapse"},"children":[{"data":{"id":"cx7lwho2cco0","created":1700886383747,"text":"1. 获取context中的Resource对象进行，并使用reader加载BeanDefinition","layout":null},"children":[{"data":{"id":"cx7m1lubtjs0","created":1700886784654,"text":"loadBeanDefinitions(encodedResource) ","layout":null},"children":[{"data":{"id":"cx7m278bxi80","created":1700886831213,"text":"1. 记录当前配置到正在解析集合中","note":"此处记录正在解析的集合时使用的现场本地变量resourcesCurrentlyBeingLoaded","layout":null},"children":[]},{"data":{"id":"cx7m28wvjts0","created":1700886834874,"text":"2.doLoadBeanDefinitions(inputSource, resource)","layout":null},"children":[{"data":{"id":"cx7m4rbl4ww0","created":1700887031674,"text":"doLoadDocument(inputSource, resource)","note":"生产配置xml配置文件的文本对象","layout":null},"children":[]},{"data":{"id":"cx7m4tqxe1k0","created":1700887036955,"text":"registerBeanDefinitions(doc, resource)","note":"解析xml文本对象中的各个标签\n\n此处调用的一些过程已省略，直接到DefaultBeanDefinitonDoucumentReader的doRegisterBeanDefinitions(root)方法中","layout":null},"children":[{"data":{"id":"cx7m6wpztwo0","created":1700887200157,"text":"preProcessXml","note":"前置钩子函数","layout":null},"children":[]},{"data":{"id":"cx7m74r9ka80","created":1700887217648,"text":"parseBeanDefinitions","note":"会获取BeanDefinitionParserDelegate类","layout":null},"children":[{"data":{"id":"cx7m9547onk0","created":1700887375160,"text":"parseDefaultElement 解析默认标签","layout":null},"children":[{"data":{"id":"cx7m9hggjhc0","created":1700887402021,"text":"import","layout":null},"children":[]},{"data":{"id":"cx7m9petdcw0","created":1700887419336,"text":"alias","layout":null},"children":[]},{"data":{"id":"cx7m9ujl5y80","created":1700887430509,"text":"bean","layout":null},"children":[]},{"data":{"id":"cx7m9xhvok80","created":1700887436936,"text":"beans","layout":null},"children":[]}]},{"data":{"id":"cx7m95jkb600","created":1700887376088,"text":"parseCustomElement 解析自定义标签","layout":null},"children":[{"data":{"id":"cx7mamozrzk0","created":1700887491786,"text":"获取标签的命名空间","layout":null},"children":[]},{"data":{"id":"cx7mayz282o0","created":1700887518516,"text":"根据命名空间找到指定的NamespaceHandler","note":"一般要自定义的话会继承NamespaceHandlerSupport，该类已定义好。","layout":null},"children":[]},{"data":{"id":"cx7mbcefaj40","created":1700887547743,"text":"调用handler的parse方法进行解析","layout":null},"children":[]}]}]},{"data":{"id":"cx7m74xcydk0","created":1700887218017,"text":"postProcessXml","note":"后置钩子函数","layout":null},"children":[]}]}]},{"data":{"id":"cx7m2arqzhk0","created":1700886838917,"text":"3. 从正在解析的集合中删除该配置","layout":null},"children":[]}]}]},{"data":{"id":"cx7ly7wcbrc0","created":1700886519208,"text":"2.  获取context中的配置文件路径，并使用reader加载BeanDefinition","note":"本质上也是配置文件地址解析为Resource对象，然后和1的流程一样","layout":null},"children":[]}]}]},{"data":{"id":"cx7lkmh089s0","created":1700885453834,"text":"6. 持有beanFactory的引用","layout":null},"children":[]}]},{"data":{"id":"cx7kxxpkat40","created":1700883675922,"text":"getBeanFactory","note":"两个实现类GenericApplicationContext与AbstractRefreshableApplicationContext\n两个实现类都是直接返回自身持有的beanFactory引用","layout":null},"children":[]}]},{"data":{"id":"cx7jv1e2jqo0","created":1700880627730,"text":"3. prefareBeanFactory","layout":null,"background":"#e5dfec","note":"beanFactory的准备工作，对各种属性进行填充\n设置beanClassLoader，SPEL解析器,\n添加 BPP ApplicationContextAwareProcessor，设置忽略的依赖接口 6个\n指定类型的注入对象\n添加 BPP ApplicationListenerDetector\n注册Enverment相关对象到一级缓存中","expandState":"collapse"},"children":[{"data":{"id":"cx7oehtv85s0","created":1700893436873,"text":"设置beanClassLoader","layout":null},"children":[]},{"data":{"id":"cx7ogmurfgw0","created":1700893604539,"text":"设置spring 的表达式解析起","note":"spel表达解析器","layout":null},"children":[{"data":{"id":"cx7oh2tc7b40","created":1700893639282,"text":"StandardBeanExpressionResolver","note":null,"layout":null},"children":[]}]},{"data":{"id":"cx7ohkpjlrk0","created":1700893678234,"text":"设置默认的propertyEditorRegistry","note":"对bean属性设置的管理工具","layout":null},"children":[]},{"data":{"id":"cx7oiod04cg0","created":1700893764547,"text":"添加bpp - ApplicationContextAwareProcessor","layout":null},"children":[]},{"data":{"id":"cx7oixxd7bc0","created":1700893785370,"text":"设置依赖忽略的接口","expandState":"expand","layout":null},"children":[{"data":{"id":"cx7omtramjs0","created":1700894089752,"text":"EnvironmentAware","layout":null},"children":[]},{"data":{"id":"cx7omztuh200","created":1700894102967,"text":"EmbeddedValueResolverAware","layout":null},"children":[]},{"data":{"id":"cx7on2ykccg0","created":1700894109783,"text":"ResourceLoaderAware","layout":null},"children":[]},{"data":{"id":"cx7on53vby80","created":1700894114457,"text":"ApplicationEventPublisherAware","layout":null},"children":[]},{"data":{"id":"cx7on7b097c0","created":1700894119242,"text":"MessageSourceAware","layout":null},"children":[]},{"data":{"id":"cx7on9lfp940","created":1700894124226,"text":"ApplicationContextAware","layout":null},"children":[]}]},{"data":{"id":"cx7ojau7l7s0","created":1700893813477,"text":"设置指定类型的注入对象","expandState":"expand","layout":null},"children":[{"data":{"id":"cx7ooak0tnc0","created":1700894204682,"text":"BeanFactory","layout":null},"children":[{"data":{"id":"cx7oou1j63s0","created":1700894247099,"text":"分支主 cntext持有的beanFactory题","layout":null},"children":[]}]},{"data":{"id":"cx7oolzq0y80","created":1700894229576,"text":"ResourceLoader","layout":null},"children":[{"data":{"id":"cx7oop2clts0","created":1700894236265,"text":"this","layout":null},"children":[]}]},{"data":{"id":"cx7op060uew0","created":1700894260432,"text":"ApplicationEventPublisher","layout":null},"children":[{"data":{"id":"cx7op3jslio0","created":1700894267795,"text":"this","layout":null},"children":[]}]},{"data":{"id":"cx7op4okqds0","created":1700894270260,"text":"ApplicationContext","layout":null},"children":[{"data":{"id":"cx7op88u0000","created":1700894278016,"text":"this","layout":null},"children":[]}]}]},{"data":{"id":"cx7ojomb5gg0","created":1700893843474,"text":"添加bpp- ApplicationListenerDetector","layout":null},"children":[]},{"data":{"id":"cx7okfu3bsw0","created":1700893902718,"text":"如果存在LoadTimeWeaverBean， 添加weaving","layout":null},"children":[]},{"data":{"id":"cx7olj2lerc0","created":1700893988126,"text":"注册环境bean到容器中","layout":null},"children":[{"data":{"id":"cx7olsk7iio0","created":1700894008783,"text":"环境对象Enverment","layout":null},"children":[]},{"data":{"id":"cx7olzrtsdk0","created":1700894024481,"text":"系统属性SystemProperties","layout":null},"children":[]},{"data":{"id":"cx7ome9qua80","created":1700894056039,"text":"系统环境变量SystemEnverment","layout":null},"children":[]}]}]},{"data":{"id":"cx7jrhd3xy80","created":1700880349044,"text":"4. postProcessBeanFactory","expandState":"expand","background":"#b6dde8","progress":1,"layout":null},"children":[{"data":{"id":"cx7opqz8fv40","created":1700894318794,"text":"模版方法，供子类扩展","layout":null},"children":[]}]},{"data":{"id":"cx7jrssra5c0","created":1700880373935,"text":"5. invokeBeanFacotryPostProcessors","background":"#b6dde8","note":"调用容器中的BDRPP与BFPP\nBDRPP: BeanDefinitionRegistryPostProcessor\nBFPP:BeanFactoryPostProcessor\n\n大致流程：\n使用委托类PostProcessorRegistrationDelegate执行，传入参数为context中的BFPP集合。可为空。\n若当前的beanFactory未实现BeanDefinitionRegistry接口。只处理BFPP。\n对传入的Processor进行分类，分为BFPP和BDRPP。执行BDRPP的postProcessBeanDefinitionRegistry()，记录已经执行的对象。然后从容器中获取BDRPP且实现PriorityOrdered接口的对象，执行并记录。然后从容器中获取实现了Ordered接口的对象，执行并记录。然后while执行剩下的BDRPP。\n然后执行传入进来的BFPP。然后执行所有BDRPP的postRocessBeanFactory方法。在执行传入进来的BFPP的postProcessBeanFactory方法\n然后从容器中获取BFPP和priorityOrdered接口的对象，执行postProcessBeanFactory方法，再冲容器中获取BFPP且实现了Ordered接口且未执行的对象，执行postProcessorBeanFactory方法。然后执行容器中剩下的未执行的BFPP的postProcessBeanFactory方法\n","expandState":"expand","layout":null},"children":[{"data":{"id":"cx7oq8cprd40","created":1700894356615,"text":"PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors","layout":null},"children":[]}]},{"data":{"id":"cx7jsoj9gqo0","created":1700880443018,"text":"6. registerBeanPostProcessor","background":"#b6dde8","note":"遍历所有的BeanName获取并注册BPP\n\n按照PriorityOrdered，Ordered，nonOrdered，internalPostProcessor的顺序进行注册","expandState":"expand","layout":null},"children":[{"data":{"id":"cx7p6trp5400","created":1700895657060,"text":"PostProcessorRegistrationDelegate.registerBeanPostProcessors","layout":null},"children":[]}]},{"data":{"id":"cx7jsa3gwvc0","created":1700880411588,"text":"7. initMessageSource","background":"#b6dde8","note":"主要指i18n相关","layout":null},"children":[]},{"data":{"id":"cx7jx1ee9mw0","created":1700880784478,"text":"8. initApplicationEnventMultiCaster","background":"#b6dde8","note":"初始化一个时间多播器，若容器中已经定义直接获取容器中的，如果没有，新建一个并放入容器中。key为applicationEventMulticaster","layout":null},"children":[]},{"data":{"id":"cx7jxpr2voo0","created":1700880837488,"text":"9. onRefresh","background":"#b6dde8","progress":1,"expandState":"collapse","layout":null},"children":[{"data":{"id":"cx7opqz8fv40","created":1700894318794,"text":"模版方法，供子类扩展","layout":null},"children":[]}]},{"data":{"id":"cx7jsgna2e00","created":1700880425846,"text":"10. registerListener","background":"#b6dde8","expandState":"expand","layout":null},"children":[{"data":{"id":"cx7pe9ngk480","created":1700896240181,"text":"获取context中的applicationListeners并注入到多播器中， （prepareFresh）","layout":null},"children":[]},{"data":{"id":"cx7pk2jzm2o0","created":1700896694919,"text":"获取容器中的监听器注册到多播器中","layout":null},"children":[]},{"data":{"id":"cx7plvki0bs0","created":1700896836440,"text":"发布earlyApplicationEvents 事件 （prepareFresh）","layout":null},"children":[]}]},{"data":{"id":"cx7r6ue0x5s0","created":1700901300629,"text":"11. finshBeanFactoryInitialization","note":"完成beanFactory的初始化。初始化剩下的单例bean\t","background":"#b6dde8","layout":null,"expandState":"collapse"},"children":[{"data":{"id":"cx7rngj578g0","created":1700902602655,"text":"设置conversionService","note":"若容器中有beanName为conversionService，且类型为ConversionService.class的bean对象才设置","layout":null},"children":[{"data":{"id":"cx7rptvqf340","created":1700902788443,"text":"容器中有才设置","layout":null},"children":[]}]},{"data":{"id":"cx7rnhgcre00","created":1700902604663,"text":"设置嵌入的值解析器EmbeddedValueResolve","layout":null},"children":[{"data":{"id":"cx7rqgaq0wo0","created":1700902837238,"text":"之前没有才设置","layout":null},"children":[]}]},{"data":{"id":"cx7rnhirawg0","created":1700902604808,"text":"初始化LoadTimeWeaverAware bean对象","layout":null},"children":[{"data":{"id":"cx7rrqpcn9c0","created":1700902938255,"text":"容器中LoadTimeWeaverAware类型的话","layout":null},"children":[]}]},{"data":{"id":"cx7ro6txkm80","created":1700902659904,"text":"设置tempClassLoader为null","layout":null},"children":[]},{"data":{"id":"cx7ro6w3pb40","created":1700902660035,"text":"freezeConfiguration","layout":null},"children":[{"data":{"id":"cx7rt85ptxc0","created":1700903054614,"text":"冻结bean定义，使bean定义不能被修改","layout":null},"children":[]}]},{"data":{"id":"cx7ro6ypxls0","created":1700902660193,"text":"beanFactory.preInstantiateSingletons()","note":"实例化容器中剩下的单例bean","layout":null},"children":[{"data":{"id":"cx7rva4hlw00","created":1700903215621,"text":"获取所有的beanName","layout":null},"children":[]},{"data":{"id":"cx7rzf1vjyw0","created":1700903539804,"text":"遍历beanName获取对应的RootBeanDefinition","layout":null},"children":[{"data":{"id":"cx7s09182nk0","created":1700903605068,"text":"mergedBeanDefinitions获取","layout":null},"children":[]},{"data":{"id":"cx7s0gw7zy80","created":1700903622180,"text":"不为空，且不需要重新合并直接返回","note":"mbd != null && !mbd.stale\n\nstate是否需要重新合并标识：\ntrue需要重新合并\nfalse不需要重新he b","layout":null},"children":[]},{"data":{"id":"cx7s12iuizk0","created":1700903669260,"text":"为空，调用方法获取并返回 ","note":"getMergedBeanDefinition(beanName, getBeanDefinition(beanName))","layout":null},"children":[{"data":{"id":"cx7s3z8ew540","created":1700903897191,"text":"getMergedBeanDefinition","note":"合","layout":null},"children":[{"data":{"id":"cx7s46yfao80","created":1700903914002,"text":"合并","layout":null},"children":[]},{"data":{"id":"cx7s48t3pcw0","created":1700903918034,"text":"放入mergeBeanDefinitions","layout":null},"children":[]},{"data":{"id":"cx7s4f8ktio0","created":1700903932030,"text":"返回","layout":null},"children":[]}]}]}]},{"data":{"id":"cx7s4sw5xpc0","created":1700903961754,"text":"非抽象，单例，非懒加载","layout":null},"children":[]},{"data":{"id":"cx7s777o6f40","created":1700904149653,"text":"非FactoryBean，直接调用getBean(beanName)","layout":null},"children":[]},{"data":{"id":"cx7s69xku140","created":1700904077209,"text":"是factoryBean，调用getBean（& + BeanName）,再判断是否需要提前生成factoryBean提供的bean，需要的话调用getBean(Name)","layout":null},"children":[]},{"data":{"id":"cx7s9i8snzk0","created":1700904330394,"text":"getBean（beanName）","layout":null},"children":[{"data":{"id":"cx7s9jhavdk0","created":1700904333085,"text":"doGetBean(name, null, null, false)","layout":null},"children":[{"data":{"id":"cx7sa5agd1s0","created":1700904380561,"text":"transformedBeanName","layout":null},"children":[{"data":{"id":"cx7saggpvtk0","created":1700904404884,"text":"去掉是factoryBean传入的&符号","layout":null},"children":[]},{"data":{"id":"cx7saxi767s0","created":1700904441979,"text":"别名转化成beanName","layout":null},"children":[]}]},{"data":{"id":"cx7sbxt1oyo0","created":1700904520999,"text":"getSingleton(beanName)","layout":null},"children":[{"data":{"id":"cx7scbylz7s0","created":1700904551810,"text":"getSingleton(beanName, true);","note":"```java\nprotected Object getSingleton(String beanName, boolean allowEarlyReference) {\n\t\t// Quick check for existing instance without full singleton lock\n\t\t// 从单例对象缓存中获取beanName对应的单例对象\n\t\tObject singletonObject = this.singletonObjects.get(beanName);\n\t\t// 如果单例对象缓存中没有，并且该beanName对应的单例bean正在创建中\n\t\tif (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) {\n\t\t\t//从早期单例对象缓存中获取单例对象（之所称成为早期单例对象，是因为earlySingletonObjects里\n\t\t\t// 的对象的都是通过提前曝光的ObjectFactory创建出来的，还未进行属性填充等操作）\n\t\t\tsingletonObject = this.earlySingletonObjects.get(beanName);\n\t\t\t// 如果在早期单例对象缓存中也没有，并且允许创建早期单例对象引用\n\t\t\tif (singletonObject == null && allowEarlyReference) {\n\t\t\t\t// 如果为空，则锁定全局变量并进行处理\n\t\t\t\tsynchronized (this.singletonObjects) {\n\t\t\t\t\t// Consistent creation of early reference within full singleton lock\n\t\t\t\t\tsingletonObject = this.singletonObjects.get(beanName);\n\t\t\t\t\tif (singletonObject == null) {\n\t\t\t\t\t\tsingletonObject = this.earlySingletonObjects.get(beanName);\n\t\t\t\t\t\tif (singletonObject == null) {\n\t\t\t\t\t\t\t// 当某些方法需要提前初始化的时候则会调用addSingletonFactory方法将对应的ObjectFactory初始化策略存储在singletonFactories\n\t\t\t\t\t\t\tObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName);\n\t\t\t\t\t\t\tif (singletonFactory != null) {\n\t\t\t\t\t\t\t\t// 如果存在单例对象工厂，则通过工厂创建一个单例对象\n\t\t\t\t\t\t\t\tsingletonObject = singletonFactory.getObject();\n\t\t\t\t\t\t\t\t// 记录在缓存中，二级缓存和三级缓存的对象不能同时存在\n\t\t\t\t\t\t\t\tthis.earlySingletonObjects.put(beanName, singletonObject);\n\t\t\t\t\t\t\t\t// 从三级缓存中移除\n\t\t\t\t\t\t\t\tthis.singletonFactories.remove(beanName);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn singletonObject;\n\t}\n```","layout":null},"children":[{"data":{"id":"cx7scvz7uc80","created":1700904595383,"text":"singletonObjects.get(beanName)","layout":null},"children":[]},{"data":{"id":"cx7sd3amfao0","created":1700904611310,"text":"earlySingletonObjects.get(beanName)","layout":null},"children":[]},{"data":{"id":"cx7sdyttlw80","created":1700904679951,"text":"singletonFactories.get(beanName).getObject()","layout":null},"children":[]}]}]},{"data":{"id":"cx7sf5606u80","created":1700904772113,"text":"getSingleton返回非空","layout":null},"children":[{"data":{"id":"cx7suz0ybvc0","created":1700906012573,"text":"直接调用getObjectForBeanInstance","layout":null},"children":[]}]},{"data":{"id":"cx7sghyny9k0","created":1700904878331,"text":"getSingleton为空","layout":null},"children":[{"data":{"id":"cx7sv4eztlk0","created":1700906024306,"text":"判断是否原型bean且处于正在创建的集合中","layout":null},"children":[{"data":{"id":"cx7svira4fc0","created":1700906055524,"text":"是","layout":null},"children":[{"data":{"id":"cx7swa7f1mo0","created":1700906115272,"text":"BeanCurrentlyInCreationException","layout":null},"children":[]}]},{"data":{"id":"cx7svkx5q7c0","created":1700906060233,"text":"否","layout":null},"children":[{"data":{"id":"cx7swl05krs0","created":1700906138778,"text":"不做处理","layout":null},"children":[]}]}]},{"data":{"id":"cx7swowiggw0","created":1700906147265,"text":"当父容器中存在该bean定义时尝试从父容器中获取并返回","layout":null},"children":[]},{"data":{"id":"cx7szx1w4n40","created":1700906400097,"text":"markBeanAsCreated(beanName)","layout":null},"children":[]},{"data":{"id":"cx7szdyxjqo0","created":1700906358559,"text":"getMergedLocalBeanDefinition","layout":null},"children":[]},{"data":{"id":"cx7t0455n1c0","created":1700906415532,"text":"checkMergedBeanDefinition","layout":null},"children":[]},{"data":{"id":"cx7t0ci87200","created":1700906433736,"text":"mbd.getDependsOn()","layout":null},"children":[]},{"data":{"id":"cx7t09mmt400","created":1700906427472,"text":"registerDependentBean(dep, beanName)","layout":null},"children":[{"data":{"id":"cx7t0zh46fc0","created":1700906483735,"text":"注册各个bean的依赖关系，方便进行销毁","layout":null},"children":[]}]},{"data":{"id":"cx7t0rokdmo0","created":1700906466771,"text":"getBean(dep);","layout":null},"children":[{"data":{"id":"cx7t0vnavyo0","created":1700906475402,"text":"递归优先实例化被依赖的Bean","layout":null},"children":[]}]},{"data":{"id":"cx7t19lt7t40","created":1700906505788,"text":"getSingleton(beanName， singletonFactory）","note":"singletonFactory = () -> createBean();","layout":null},"children":[{"data":{"id":"cx7wlf2kg9s0","created":1700916548297,"text":"锁住singletonObjects","layout":null},"children":[]},{"data":{"id":"cx7wm54jms80","created":1700916605013,"text":"从singleton获取，不为空直接返回，为空的话","layout":null},"children":[{"data":{"id":"cx7wnrdwi5c0","created":1700916731832,"text":"是否正处于销毁状态","layout":null},"children":[{"data":{"id":"cx7wokiu8y00","created":1700916795257,"text":"是 BeanCreationNotAllowedException","layout":null},"children":[]},{"data":{"id":"cx7wosqied40","created":1700916813135,"text":"否 不做操作","layout":null},"children":[]}]},{"data":{"id":"cx7woi4twi80","created":1700916790057,"text":"beforeSingletonCreation","layout":null},"children":[{"data":{"id":"cx7wp8g77ko0","created":1700916847340,"text":"创建bean之前的操作，一般是把当前要创建的bean放入正在创建的集合中","layout":null},"children":[]}]},{"data":{"id":"cx7wq5fvry80","created":1700916919155,"text":"声明一个变量表示是否是新生成的singleteon","expandState":"expand","layout":null},"children":[{"data":{"id":"cx7wqkiioco0","created":1700916951966,"text":"boolean newSingleton = false;","layout":null},"children":[]}]},{"data":{"id":"cx7wrrne41c0","created":1700917045862,"text":"singletonFactory.getObject();","layout":null},"children":[{"data":{"id":"cx7wst0ducg0","created":1700917127189,"text":"调用createBean方法","layout":null},"children":[{"data":{"id":"cx7wxuwj51k0","created":1700917523130,"text":"resolveBeanClass(mbd, beanName)","note":"解析RootBeanDefinition获取bean对象的类型，返回值为Class对象","layout":null},"children":[]},{"data":{"id":"cx7x4uulqwg0","created":1700918071563,"text":"复制一个新的RootBeanDefinition并重新赋值给mbd","layout":null},"children":[]},{"data":{"id":"cx7x5ttc66o0","created":1700918147674,"text":"设置mbd的beanClass类型，即resolveBeanClass的返回值","layout":null},"children":[]},{"data":{"id":"cx7x6wfs3mw0","created":1700918231749,"text":"mbdToUse.prepareMethodOverrides();","note":"验证及准备覆盖的方法,lookup-method  replace-method，当需要创建的bean对象中包含了lookup-method和replace-method标签的时候，会产生覆盖操作","color":"#c0504d","layout":null},"children":[]},{"data":{"id":"cx7x8lu8kjk0","created":1700918365407,"text":"resolveBeforeInstantiation(beanName, mbdToUse);","note":"在创建bean的时候给InstantiationAwareBeanPostProcessor\n一个机会创建bean对象直接返回\n如果有aop的话，会在此生成advisor对象","expandState":"expand","background":"#f2dbdb","layout":null},"children":[{"data":{"id":"cx7xayqvdy00","created":1700918550229,"text":"mbd.beforeInstantiationResolved为false","layout":null},"children":[]},{"data":{"id":"cx7xbcxyk6w0","created":1700918581133,"text":"!mbd.isSynthetic() && hasInstantiationAwareBeanPostProcessors()","note":"判断当前mbd是否是合成的，只有在实现aop的时候synthetic的值才为true，并且是否实现了InstantiationAwareBeanPostProcessor接口","layout":null},"children":[]},{"data":{"id":"cx7xc07up400","created":1700918631797,"text":"determineTargetType(beanName, mbd);","note":"获取容器中的bpp，调用InstantiationAwareBeanPostProcessor的postProcessBeforeInstantiation()方法\n\n当调用1的返回值不为null时，在调用InstantiationAwareBeanPostProcessor的postProcessAfterInstantiation方法","layout":null},"children":[]},{"data":{"id":"cx7xd0qn3t40","created":1700918711297,"text":"bean = applyBeanPostProcessorsBeforeInstantiation(targetType, beanName)","note":"获取容器中的bpp，调用InstantiationAwareBeanPostProcessor的postProcessBeforeInstantiation()方法","layout":null},"children":[{"data":{"id":"cx8dg2tt8co0","created":1700964088694,"text":"执行InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation方法","layout":null},"children":[]}]},{"data":{"id":"cx7xh3jwtfc0","created":1700919030878,"text":"bean不为null才调用 bean = applyBeanPostProcessorsAfterInitialization(bean, beanName)","layout":null},"children":[{"data":{"id":"cx8dgpl11r40","created":1700964138229,"text":"执行所有BPP的postProcessAfterInitialization方法","layout":null},"children":[]}]},{"data":{"id":"cx7xhfm7gg80","created":1700919057138,"text":"mbd.beforeInstantiationResolved = (bean != null);","layout":null},"children":[]}]},{"data":{"id":"cx7xi5w4zao0","created":1700919114335,"text":"doCreateBean(beanName, mbdToUse, args)","layout":null},"children":[{"data":{"id":"cx7xi9q5muw0","created":1700919122680,"text":"instanceWrapper = this.factoryBeanInstanceCache.remove(beanName);","layout":null},"children":[]},{"data":{"id":"cx7xk5jxa5k0","created":1700919270324,"text":"instanceWrapper = createBeanInstance(beanName, mbd, args);","background":"#f2dbdb","layout":null},"children":[{"data":{"id":"cx7y2s8l7s80","created":1700920730260,"text":"获取bean对象的类型","note":null,"layout":null},"children":[{"data":{"id":"cx7y35awj4g0","created":1700920758698,"text":"resolveBeanClass(mbd, beanName);","layout":null},"children":[]}]},{"data":{"id":"cx7y34noot40","created":1700920757294,"text":"mbd.getInstanceSupplier()不为空，使用supplier生成bean对象并返回","layout":null},"children":[{"data":{"id":"cx7y40zq9yo0","created":1700920827679,"text":"obtainFromSupplier(instanceSupplier, beanName);","layout":null},"children":[]}]},{"data":{"id":"cx7y3ucyxoo0","created":1700920813243,"text":"mbd.getFactoryMethodName()不为空，使用工厂方法生成bean对象并返回","layout":null},"children":[{"data":{"id":"cx7y4lqoosg0","created":1700920872845,"text":"instantiateUsingFactoryMethod(beanName, mbd, args);","layout":null},"children":[]}]},{"data":{"id":"cx7y4t3wqyw0","created":1700920888882,"text":"推断出构造方法，使用构造方法生成bean对对象并返回","layout":null},"children":[]}]},{"data":{"id":"cx7xkri769k0","created":1700919318109,"text":"synchronized (mbd.postProcessingLock) ","layout":null},"children":[]},{"data":{"id":"cx7xktrmty00","created":1700919323033,"text":"applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);","note":"允许beanPostProcessor去修改合并的beanDefinition\n\n典型的类有：\nCommonAnnotationBeanPostProcessor: 解析 @Resource @EJB @WebServiceRef注解\n\nAutowiredAnnotationBeanPostProcessor 解析：@Autowired注解@Value注解@Inject","layout":null},"children":[{"data":{"id":"cx7xpli8i5c0","created":1700919696872,"text":"调用容器中所有的MergedBeanDefinitionPostProcessor的postProcessMergeBeanDefinition","note":"spring通过此方法找到所有需要注入的字段，同时缓存在mdb中","layout":null},"children":[]}]},{"data":{"id":"cx7xrw101dc0","created":1700919876502,"text":"判断是否需要提前暴露","note":"判断当前bean是否需要提前曝光：单例&允许循环依赖&当前bean正在创建中，检测循环依赖","layout":null},"children":[{"data":{"id":"cx7xs1xizkg0","created":1700919889353,"text":"单例","layout":null},"children":[]},{"data":{"id":"cx7xs50cmxs0","created":1700919896054,"text":"允许循环依赖","layout":null},"children":[]},{"data":{"id":"cx7xsdooars0","created":1700919914939,"text":"当前bean正在创建中","layout":null},"children":[]}]},{"data":{"id":"cx7xsqx0n3s0","created":1700919943742,"text":"向三级缓存中添加lambda表达式","layout":null},"children":[{"data":{"id":"cx7xuupt1400","created":1700920108741,"text":"addSingletonFactory(beanName, () -> getEarlyBeanReference(beanName, mbd, bean));","layout":null},"children":[{"data":{"id":"cx9lzu2cweo0","created":1701089765739,"text":" getEarlyBeanReference(beanName, mbd, bean));会在从三级缓存中获取bean对象后调用"},"children":[{"data":{"id":"cx9m0f8bfkw0","created":1701089811811,"text":"获取容器中所有的BPP，并调用SmartInstantiationAwareBeanPostProcessor的getEarlyRefrence方法"},"children":[{"data":{"id":"cx9m1nqzdlc0","created":1701089908718,"text":"AbstractAutoProxyCreator#wrapIfNecessary","note":"AbstractAutoProxyCreator实现了SmartInstantiationAwareBeanPostProcessor。其内的postProcessAfterInitialization方法和getEarlyRefrence方法最终都会调用warpIfNecessary方法，去生成代理对象。"},"children":[]}]}]}]}]},{"data":{"id":"cx7xv0ghue00","created":1700920121239,"text":"populateBean(beanName, mbd, instanceWrapper);","note":"给bean对象填充属性，若要填充的属性不存在又回调用getBean去递归创建。\n\n--- \n1. 执行实例化的后置处理器\n2. 获取mdb的PropertyValues属性挨个遍历填充属性","background":"#f2dbdb","layout":null},"children":[{"data":{"id":"cx8de0hw0yw0","created":1700963926891,"text":"执行实例化后的增强方法","note":"mbd.isSynthetic为false的bean才会执行。一般地只有AOP的内置对象isSynthetic才为true。如Advisor对象","layout":null},"children":[{"data":{"id":"cx8dlfywvoo0","created":1700964509121,"text":"获取注册的BPP执行所有InstantiationAwareBeanPostProcessor的postProcessAfterInstantiation方法","layout":null},"children":[]}]},{"data":{"id":"cx9keu1sde00","created":1701085298947,"text":"是否autowireByType或者autowireByName","layout":null},"children":[{"data":{"id":"cx9kfq2qtc00","created":1701085368662,"text":"autowireByType","layout":null,"background":"#fabf8f"},"children":[{"data":{"id":"cx9kjqb8gb40","created":1701085682632,"text":"通过类型获取getBean()并放入pvs中","background":"#fabf8f","layout":null},"children":[]}]},{"data":{"id":"cx9kfvat4b40","created":1701085380033,"text":"autowireByName","layout":null,"background":"#fabf8f"},"children":[{"data":{"id":"cx9kjqogz9s0","created":1701085683432,"text":"查找出对应的bean对象放入pvs中","background":"#fabf8f","layout":null},"children":[]}]}]},{"data":{"id":"cx9kfz9pwk00","created":1701085388674,"text":"applyPropertyValues(beanName, mbd, bw, pvs);","layout":null},"children":[{"data":{"id":"cx9l83ya6tc0","created":1701087593063,"text":"valueResolver.resolveValueIfNecessary(pv, originalValue)","layout":null},"children":[{"data":{"id":"cx9l8b42kuw0","created":1701087608651,"text":"RuntimeBeanReference","layout":null},"children":[]},{"data":{"id":"cx9l8dbdmqo0","created":1701087613446,"text":"RuntimeBeanNameReference","layout":null},"children":[]},{"data":{"id":"cx9l8fhdwso0","created":1701087618163,"text":"BeanDefinitionHolder","layout":null},"children":[]},{"data":{"id":"cx9l8hfopqo0","created":1701087622414,"text":"BeanDefinition","layout":null},"children":[]},{"data":{"id":"cx9l8jvvq280","created":1701087627747,"text":"DependencyDescriptor","layout":null},"children":[]},{"data":{"id":"cx9l8lve77s0","created":1701087632071,"text":"ManagedArray","layout":null},"children":[]},{"data":{"id":"cx9l8o91waw0","created":1701087637250,"text":"ManagedList","layout":null},"children":[]},{"data":{"id":"cx9l8q8abk80","created":1701087641558,"text":"ManagedSet","layout":null},"children":[]},{"data":{"id":"cx9l8s9xw4o0","created":1701087646011,"text":"ManagedMap","layout":null},"children":[]},{"data":{"id":"cx9l8ttmp0o0","created":1701087649378,"text":"ManagedProperties","layout":null},"children":[]},{"data":{"id":"cx9l8w38srs0","created":1701087654313,"text":"TypedStringValue","layout":null},"children":[]},{"data":{"id":"cx9l8z14ofs0","created":1701087660716,"text":"NullBean","layout":null},"children":[]},{"data":{"id":"cx9l993g4cw0","created":1701087682624,"text":"evaluate(value);","layout":null},"children":[]}]}]}]},{"data":{"id":"cx7xpanujew0","created":1700919673266,"text":"exposedObject = initializeBean(beanName, exposedObject, mbd);","note":"调用执行aware接口的方法\n执行BPP的前置处理方法postProcessBeforeBeanInitialization\n只想init-method\n只想BPP的后置处理方法postProcessAfterBeanInitialization\n其中AOP生成代理类就是在BPP的后置处理生成的。AspectJAutoProxyCreator","background":"#f2dbdb","layout":null},"children":[{"data":{"id":"cx9lbz3a6c00","created":1701087895939,"text":"invokeAwareMethods","note":"这个可接口在前文obtainBeanFactory中的createBeanFactory加入了忽略依赖的","layout":null},"children":[{"data":{"id":"cx9lnn7o6ow0","created":1701088810453,"text":"BeanFactoryAware"},"children":[{"data":{"id":"cx9lo00rlb40","created":1701088838333,"text":"setBeanFactory"},"children":[]}]},{"data":{"id":"cx9lnqs29ko0","created":1701088818216,"text":"BeanNameAware"},"children":[{"data":{"id":"cx9lo75aja00","created":1701088853844,"text":"setBeanName"},"children":[]}]},{"data":{"id":"cx9lnugsba00","created":1701088826241,"text":"BeanClassLoaderAware"},"children":[{"data":{"id":"cx9lo8k0wfs0","created":1701088856912,"text":"setBeanClassLoader"},"children":[]}]}]},{"data":{"id":"cx9lq305mxs0","created":1701089001555,"text":"调用bpp的前置处理方法postProcessBeforeInitization"},"children":[{"data":{"id":"cx9lr2ej8c80","created":1701089078612,"text":"获取容器中所有的bpp，依次调用。注意如果返回值为null，会中断后序bpp调用"},"children":[]}]},{"data":{"id":"cx9lmqa830o0","created":1701088738773,"text":"invokeAwareMethods(beanName, bean);","layout":null,"note":"1. 给生成的bean一个机会在所有属性设置完后作出反应。当bean实现了InitializingBean接口时会调用其afterPropertiesSet()方法\n2. 如果有自定义的initmethod，会调用执行指定一的initMethod方法"},"children":[{"data":{"id":"cx9lpktvv0g0","created":1701088961994,"text":"如果实现了InitializingBean接口，调用其afterPropertiesSet方法"},"children":[]},{"data":{"id":"cx9ltfnsjh40","created":1701089264198,"text":"如果有自定义的初始化方法，调用自动移初始化方法"},"children":[]},{"data":{"id":"cx9lu3ivne00","created":1701089316144,"text":"非aop内部相关类，调用bpp的后置处理postProcessAfterInitinization方法","note":"一般滴，aop生成代理对象的逻辑也是在此调用完成。AspectJAwareAdvisorAutoProxyCreator的postProcessAfterInitialization方法。\n\n注意生成代理对象的方法为"},"children":[]}]},{"data":{"id":"cx9ltwereqo0","created":1701089300657,"text":"分支主题"},"children":[]}]},{"data":{"id":"cx7xvoyumk80","created":1700920174592,"text":"循环依赖检测","layout":null,"note":"如果进入到这个判断里面来，就说明纯在循环依赖了。"},"children":[]},{"data":{"id":"cx7xvubwfe80","created":1700920186265,"text":"registerDisposableBeanIfNecessary(beanName, bean, mbd);","layout":null},"children":[{"data":{"id":"cx7xw0jkhp40","created":1700920199789,"text":"注册bean对象销毁的回调方法","layout":null},"children":[]}]}]}]}]},{"data":{"id":"cx7wqp22x7k0","created":1700916961856,"text":"singleteon = true","layout":null},"children":[]},{"data":{"id":"cx7ws1n3viw0","created":1700917067613,"text":"afterSingletonCreation(beanName);","layout":null},"children":[{"data":{"id":"cx7wseuflpc0","created":1700917096354,"text":"创建bean之后的操作，一般是把当前bean从正在创建的集合中移除","layout":null},"children":[]},{"data":{"id":"cx7wxbvg8kg0","created":1700917481706,"text":"如果当前创建的bean没有在正在创建的集合中抛出异常 IllegalStateException","layout":null},"children":[]}]},{"data":{"id":"cx7ws4o2nh40","created":1700917074202,"text":"addSingleton(beanName, singletonObject)","layout":null},"children":[{"data":{"id":"cx7wtf7lbuo0","created":1700917175514,"text":"synchronized (this.singletonObjects)","layout":null},"children":[]},{"data":{"id":"cx7wtqaesfs0","created":1700917199629,"text":"this.singletonObjects.put(beanName, singletonObject);","layout":null},"children":[]},{"data":{"id":"cx7wubetyhk0","created":1700917245609,"text":"this.singletonFactories.remove(beanName);","layout":null},"children":[]},{"data":{"id":"cx7wuobhh9c0","created":1700917273705,"text":"this.earlySingletonObjects.remove(beanName);","layout":null},"children":[]},{"data":{"id":"cx7wutww59k0","created":1700917285883,"text":"this.registeredSingletons.add(beanName);","layout":null},"children":[]}]}]},{"data":{"id":"cx7wmoycpdk0","created":1700916648174,"text":"释放锁并返回","layout":null},"children":[]}]}]},{"data":{"id":"cx7srpddjsw0","created":1700905756464,"text":"getObjectForBeanInstance","layout":null},"children":[{"data":{"id":"cx7st71leso0","created":1700905873298,"text":"主要处理是FactoryBean的情况，这时需要决定是否返回factoryBean还是bean","layout":null},"children":[]}]},{"data":{"id":"cx7suhvmo200","created":1700905975246,"text":"传入的类型不为空需要校验类型","layout":null},"children":[]}]}]}]}]},{"data":{"id":"cx7jt6vlr340","created":1700880482946,"text":"12. finishRefresh","background":"#b6dde8","note":null,"expandState":"collapse","layout":null},"children":[{"data":{"id":"cx7qzxtba0o0","created":1700900759536,"text":"clearResourceCache","layout":null},"children":[{"data":{"id":"cx7r0k7jtp40","created":1700900808285,"text":"清楚context级别的缓存，如ASM元数据","layout":null},"children":[]}]},{"data":{"id":"cx7r004fh1s0","created":1700900764561,"text":"initLifeCycleProcessor","layout":null},"children":[{"data":{"id":"cx7r1gsauhs0","created":1700900879197,"text":"从容器中获取lifecycleProcessor类，没有就创建并注册","layout":null},"children":[]}]},{"data":{"id":"cx7r006xqdc0","created":1700900764712,"text":"getLifecycleProcessor().onRefresh()","layout":null},"children":[{"data":{"id":"cx7r2t2mbyg0","created":1700900984306,"text":"触发context刷新事件","layout":null},"children":[]}]},{"data":{"id":"cx7r009ffwo0","created":1700900764863,"text":"publishEvent(new ContextRefreshedEvent(this))","layout":null},"children":[{"data":{"id":"cx7r3xwe0pk0","created":1700901073178,"text":"使用多播器发布最终事件","layout":null},"children":[]}]},{"data":{"id":"cx7r00c6pxc0","created":1700900765030,"text":"LiveBeansView.registerApplicationContext(this)","expandState":"expand","layout":null},"children":[{"data":{"id":"cx7r4lh6mo80","created":1700901124501,"text":"注册当前context到LiveBeansView","layout":null},"children":[]}]}]},{"data":{"id":"cx7k0aroftk0","created":1700881039965,"text":"1. destroyBeans","background":"#e5b8b7","layout":null,"note":"为防止bean资源占用，在异常处理中，销毁已经在前面过程中生成的单例bean"},"children":[{"data":{"id":"cx7rj3ghihs0","created":1700902260739,"text":"清楚缓存的单例bean，释放资源","layout":null},"children":[]}]},{"data":{"id":"cx7k0olhlb40","created":1700881070066,"text":"2. cancelRefresh","background":"#e5b8b7","layout":null},"children":[{"data":{"id":"cx7rjdprjhc0","created":1700902283068,"text":"设置context的active状态为false","layout":null},"children":[]}]},{"data":{"id":"cx7jz0vkx7s0","created":1700880940070,"text":"13. resetCommonCache","background":"#fabf8f","layout":null,"note":"清空一些通用的缓存，因为在此之后再也不会使用了"},"children":[]}]},"template":"right","theme":"fresh-purple-compat","version":"1.4.43"}